{"ast":null,"code":"var _jsxFileName = \"/Users/younis/Desktop/RingCentral/client/src/components/CallPage/CallPage.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useReducer, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { getRequest, postRequest } from \"./../../utils/apiRequests\";\nimport { BASE_URL, GET_CALL_ID, SAVE_CALL_ID } from \"./../../utils/apiEndpoints\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport \"./CallPage.scss\";\nimport Messenger from \"./../UI/Messenger/Messenger\";\nimport MessageListReducer from \"../../reducers/MessageListReducer\";\nimport Alert from \"../UI/Alert/Alert\";\nimport MeetingInfo from \"../UI/MeetingInfo/MeetingInfo\";\nimport CallPageFooter from \"../UI/CallPageFooter/CallPageFooter\";\nimport CallPageHeader from \"../UI/CallPageHeader/CallPageHeader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet peer = null;\nconst socket = io.connect(\"http://localhost:4000\");\nconst initialState = [];\n\nconst CallPage = () => {\n  _s();\n\n  const history = useHistory();\n  let {\n    id\n  } = useParams();\n  const isAdmin = window.location.hash == \"#init\" ? true : false;\n  const url = `${window.location.origin}${window.location.pathname}`;\n  let alertTimeout = null;\n  const [messageList, messageListReducer] = useReducer(MessageListReducer, initialState);\n  const [streamObj, setStreamObj] = useState();\n  const [screenCastStream, setScreenCastStream] = useState();\n  const [meetInfoPopup, setMeetInfoPopup] = useState(false);\n  const [isPresenting, setIsPresenting] = useState(false);\n  const [isMessenger, setIsMessenger] = useState(false);\n  const [messageAlert, setMessageAlert] = useState({});\n  const [isAudio, setIsAudio] = useState(true);\n  useEffect(() => {\n    if (isAdmin) {\n      setMeetInfoPopup(true);\n    }\n\n    initWebRTC();\n    socket.on(\"code\", data => {\n      peer.signal(data);\n    });\n  }, []);\n\n  const getRecieverCode = async () => {\n    const response = await getRequest(`${BASE_URL}${GET_CALL_ID}/${id}`);\n\n    if (response.code) {\n      peer.signal(response.code);\n    }\n  };\n\n  const initWebRTC = () => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      setStreamObj(stream);\n      peer = new Peer({\n        initiator: isAdmin,\n        trickle: false,\n        stream: stream\n      });\n\n      if (!isAdmin) {\n        getRecieverCode();\n      }\n\n      peer.on(\"signal\", async data => {\n        if (isAdmin) {\n          let payload = {\n            id,\n            signalData: data\n          };\n          await postRequest(`${BASE_URL}${SAVE_CALL_ID}`, payload);\n        } else {\n          socket.emit(\"code\", data, cbData => {\n            console.log(\"code sent\");\n          });\n        }\n      });\n      peer.on(\"connect\", () => {// wait for 'connect' event before using the data channel\n      });\n      peer.on(\"data\", data => {\n        clearTimeout(alertTimeout);\n        messageListReducer({\n          type: \"addMessage\",\n          payload: {\n            user: \"other\",\n            msg: data.toString(),\n            time: Date.now()\n          }\n        });\n        setMessageAlert({\n          alert: true,\n          isPopup: true,\n          payload: {\n            user: \"other\",\n            msg: data.toString()\n          }\n        });\n        alertTimeout = setTimeout(() => {\n          setMessageAlert({ ...messageAlert,\n            isPopup: false,\n            payload: {}\n          });\n        }, 10000);\n      });\n      peer.on(\"stream\", stream => {\n        // got remote video stream, now let's show it in a video tag\n        let video = document.querySelector(\"video\");\n\n        if (\"srcObject\" in video) {\n          video.srcObject = stream;\n        } else {\n          video.src = window.URL.createObjectURL(stream); // for older browsers\n        }\n\n        video.play();\n      });\n    }).catch(() => {});\n  };\n\n  const sendMsg = msg => {\n    peer.send(msg);\n    messageListReducer({\n      type: \"addMessage\",\n      payload: {\n        user: \"you\",\n        msg: msg,\n        time: Date.now()\n      }\n    });\n  };\n\n  const screenShare = () => {\n    navigator.mediaDevices.getDisplayMedia({\n      cursor: true\n    }).then(screenStream => {\n      peer.replaceTrack(streamObj.getVideoTracks()[0], screenStream.getVideoTracks()[0], streamObj);\n      setScreenCastStream(screenStream);\n\n      screenStream.getTracks()[0].onended = () => {\n        peer.replaceTrack(screenStream.getVideoTracks()[0], streamObj.getVideoTracks()[0], streamObj);\n      };\n\n      setIsPresenting(true);\n    });\n  };\n\n  const stopScreenShare = () => {\n    screenCastStream.getVideoTracks().forEach(function (track) {\n      track.stop();\n    });\n    peer.replaceTrack(screenCastStream.getVideoTracks()[0], streamObj.getVideoTracks()[0], streamObj);\n    setIsPresenting(false);\n  };\n\n  const toggleAudio = value => {\n    streamObj.getAudioTracks()[0].enabled = value;\n    setIsAudio(value);\n  };\n\n  const disconnectCall = () => {\n    peer.destroy();\n    history.push(\"/\");\n    window.location.reload();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"callpage-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      className: \"video-container\",\n      src: \"\",\n      controls: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CallPageHeader, {\n      isMessenger: isMessenger,\n      setIsMessenger: setIsMessenger,\n      messageAlert: messageAlert,\n      setMessageAlert: setMessageAlert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CallPageFooter, {\n      isPresenting: isPresenting,\n      stopScreenShare: stopScreenShare,\n      screenShare: screenShare,\n      isAudio: isAudio,\n      toggleAudio: toggleAudio,\n      disconnectCall: disconnectCall\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), isAdmin && meetInfoPopup && /*#__PURE__*/_jsxDEV(MeetingInfo, {\n      setMeetInfoPopup: setMeetInfoPopup,\n      url: url\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }, this), isMessenger ? /*#__PURE__*/_jsxDEV(Messenger, {\n      setIsMessenger: setIsMessenger,\n      sendMsg: sendMsg,\n      messageList: messageList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }, this) : messageAlert.isPopup && /*#__PURE__*/_jsxDEV(Alert, {\n      messageAlert: messageAlert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CallPage, \"9gO+pA0ESH6jihDqvw4+p9EjDt8=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = CallPage;\nexport default CallPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CallPage\");","map":{"version":3,"sources":["/Users/younis/Desktop/RingCentral/client/src/components/CallPage/CallPage.js"],"names":["useEffect","useReducer","useState","useParams","useHistory","getRequest","postRequest","BASE_URL","GET_CALL_ID","SAVE_CALL_ID","io","Peer","Messenger","MessageListReducer","Alert","MeetingInfo","CallPageFooter","CallPageHeader","peer","socket","connect","initialState","CallPage","history","id","isAdmin","window","location","hash","url","origin","pathname","alertTimeout","messageList","messageListReducer","streamObj","setStreamObj","screenCastStream","setScreenCastStream","meetInfoPopup","setMeetInfoPopup","isPresenting","setIsPresenting","isMessenger","setIsMessenger","messageAlert","setMessageAlert","isAudio","setIsAudio","initWebRTC","on","data","signal","getRecieverCode","response","code","navigator","mediaDevices","getUserMedia","video","audio","then","stream","initiator","trickle","payload","signalData","emit","cbData","console","log","clearTimeout","type","user","msg","toString","time","Date","now","alert","isPopup","setTimeout","document","querySelector","srcObject","src","URL","createObjectURL","play","catch","sendMsg","send","screenShare","getDisplayMedia","cursor","screenStream","replaceTrack","getVideoTracks","getTracks","onended","stopScreenShare","forEach","track","stop","toggleAudio","value","getAudioTracks","enabled","disconnectCall","destroy","push","reload"],"mappings":"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","sourcesContent":["import { useEffect, useReducer, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { getRequest, postRequest } from \"./../../utils/apiRequests\";\nimport {\n  BASE_URL,\n  GET_CALL_ID,\n  SAVE_CALL_ID,\n} from \"./../../utils/apiEndpoints\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport \"./CallPage.scss\";\nimport Messenger from \"./../UI/Messenger/Messenger\";\nimport MessageListReducer from \"../../reducers/MessageListReducer\";\nimport Alert from \"../UI/Alert/Alert\";\nimport MeetingInfo from \"../UI/MeetingInfo/MeetingInfo\";\nimport CallPageFooter from \"../UI/CallPageFooter/CallPageFooter\";\nimport CallPageHeader from \"../UI/CallPageHeader/CallPageHeader\";\n\nlet peer = null;\nconst socket = io.connect(\"http://localhost:4000\");\nconst initialState = [];\n\nconst CallPage = () => {\n  const history = useHistory();\n  let { id } = useParams();\n  const isAdmin = window.location.hash == \"#init\" ? true : false;\n  const url = `${window.location.origin}${window.location.pathname}`;\n  let alertTimeout = null;\n\n  const [messageList, messageListReducer] = useReducer(\n    MessageListReducer,\n    initialState\n  );\n\n  const [streamObj, setStreamObj] = useState();\n  const [screenCastStream, setScreenCastStream] = useState();\n  const [meetInfoPopup, setMeetInfoPopup] = useState(false);\n  const [isPresenting, setIsPresenting] = useState(false);\n  const [isMessenger, setIsMessenger] = useState(false);\n  const [messageAlert, setMessageAlert] = useState({});\n  const [isAudio, setIsAudio] = useState(true);\n\n  useEffect(() => {\n    if (isAdmin) {\n      setMeetInfoPopup(true);\n    }\n    initWebRTC();\n    socket.on(\"code\", (data) => {\n      peer.signal(data);\n    });\n  }, []);\n\n  const getRecieverCode = async () => {\n    const response = await getRequest(`${BASE_URL}${GET_CALL_ID}/${id}`);\n    if (response.code) {\n      peer.signal(response.code);\n    }\n  };\n\n  const initWebRTC = () => {\n    navigator.mediaDevices\n      .getUserMedia({\n        video: true,\n        audio: true,\n      })\n      .then((stream) => {\n        setStreamObj(stream);\n\n        peer = new Peer({\n          initiator: isAdmin,\n          trickle: false,\n          stream: stream,\n        });\n\n        if (!isAdmin) {\n          getRecieverCode();\n        }\n\n        peer.on(\"signal\", async (data) => {\n          if (isAdmin) {\n            let payload = {\n              id,\n              signalData: data,\n            };\n            await postRequest(`${BASE_URL}${SAVE_CALL_ID}`, payload);\n          } else {\n            socket.emit(\"code\", data, (cbData) => {\n              console.log(\"code sent\");\n            });\n          }\n        });\n\n        peer.on(\"connect\", () => {\n          // wait for 'connect' event before using the data channel\n        });\n\n        peer.on(\"data\", (data) => {\n          clearTimeout(alertTimeout);\n          messageListReducer({\n            type: \"addMessage\",\n            payload: {\n              user: \"other\",\n              msg: data.toString(),\n              time: Date.now(),\n            },\n          });\n\n          setMessageAlert({\n            alert: true,\n            isPopup: true,\n            payload: {\n              user: \"other\",\n              msg: data.toString(),\n            },\n          });\n\n          alertTimeout = setTimeout(() => {\n            setMessageAlert({\n              ...messageAlert,\n              isPopup: false,\n              payload: {},\n            });\n          }, 10000);\n        });\n\n        peer.on(\"stream\", (stream) => {\n          // got remote video stream, now let's show it in a video tag\n          let video = document.querySelector(\"video\");\n\n          if (\"srcObject\" in video) {\n            video.srcObject = stream;\n          } else {\n            video.src = window.URL.createObjectURL(stream); // for older browsers\n          }\n\n          video.play();\n        });\n        \n      })\n      .catch(() => {});\n  };\n\n  const sendMsg = (msg) => {\n    peer.send(msg);\n    messageListReducer({\n      type: \"addMessage\",\n      payload: {\n        user: \"you\",\n        msg: msg,\n        time: Date.now(),\n      },\n    });\n  };\n\n  const screenShare = () => {\n    navigator.mediaDevices\n      .getDisplayMedia({ cursor: true })\n      .then((screenStream) => {\n        peer.replaceTrack(\n          streamObj.getVideoTracks()[0],\n          screenStream.getVideoTracks()[0],\n          streamObj\n        );\n        setScreenCastStream(screenStream);\n        screenStream.getTracks()[0].onended = () => {\n          peer.replaceTrack(\n            screenStream.getVideoTracks()[0],\n            streamObj.getVideoTracks()[0],\n            streamObj\n          );\n        };\n        setIsPresenting(true);\n      });\n  };\n\n  const stopScreenShare = () => {\n    screenCastStream.getVideoTracks().forEach(function (track) {\n      track.stop();\n    });\n    peer.replaceTrack(\n      screenCastStream.getVideoTracks()[0],\n      streamObj.getVideoTracks()[0],\n      streamObj\n    );\n    setIsPresenting(false);\n  };\n\n  const toggleAudio = (value) => {\n    streamObj.getAudioTracks()[0].enabled = value;\n    setIsAudio(value);\n  };\n\n  const disconnectCall = () => {\n    peer.destroy();\n    history.push(\"/\");\n    window.location.reload();\n  };\n\n  return (\n    <div className=\"callpage-container\">\n      <video className=\"video-container\" src=\"\" controls></video>\n\n      <CallPageHeader\n        isMessenger={isMessenger}\n        setIsMessenger={setIsMessenger}\n        messageAlert={messageAlert}\n        setMessageAlert={setMessageAlert}\n      />\n      <CallPageFooter\n        isPresenting={isPresenting}\n        stopScreenShare={stopScreenShare}\n        screenShare={screenShare}\n        isAudio={isAudio}\n        toggleAudio={toggleAudio}\n        disconnectCall={disconnectCall}\n      />\n\n      {isAdmin && meetInfoPopup && (\n        <MeetingInfo setMeetInfoPopup={setMeetInfoPopup} url={url} />\n      )}\n      {isMessenger ? (\n        <Messenger\n          setIsMessenger={setIsMessenger}\n          sendMsg={sendMsg}\n          messageList={messageList}\n        />\n      ) : (\n        messageAlert.isPopup && <Alert messageAlert={messageAlert} />\n      )}\n    </div>\n  );\n};\nexport default CallPage;\n"]},"metadata":{},"sourceType":"module"}