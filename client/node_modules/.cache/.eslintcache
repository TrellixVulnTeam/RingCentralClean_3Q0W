[{"/Users/younis/Desktop/RingCentral/client/src/index.js":"1","/Users/younis/Desktop/RingCentral/client/src/App.js":"2","/Users/younis/Desktop/RingCentral/client/src/reportWebVitals.js":"3","/Users/younis/Desktop/RingCentral/client/src/components/CallPage/CallPage.js":"4","/Users/younis/Desktop/RingCentral/client/src/utils/apiRequests.js":"5","/Users/younis/Desktop/RingCentral/client/src/utils/apiEndpoints.js":"6","/Users/younis/Desktop/RingCentral/client/src/reducers/MessageListReducer.js":"7","/Users/younis/Desktop/RingCentral/client/src/components/UI/Messenger/Messenger.js":"8","/Users/younis/Desktop/RingCentral/client/src/components/UI/CallPageFooter/CallPageFooter.js":"9","/Users/younis/Desktop/RingCentral/client/src/components/UI/Alert/Alert.js":"10","/Users/younis/Desktop/RingCentral/client/src/components/UI/MeetingInfo/MeetingInfo.js":"11","/Users/younis/Desktop/RingCentral/client/src/components/UI/CallPageHeader/CallPageHeader.js":"12","/Users/younis/Desktop/RingCentral/client/src/utils/helpers.js":"13","/Users/younis/Desktop/RingCentral/client/src/components/HomePage/HomePage.js":"14","/Users/younis/Desktop/RingCentral/client/src/components/NoMatch/NoMatch.js":"15","/Users/younis/Desktop/RingCentral/client/src/components/UI/Header/Header.js":"16"},{"size":500,"mtime":1620126550016,"results":"17","hashOfConfig":"18"},{"size":582,"mtime":1620126549781,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1620126550042,"results":"20","hashOfConfig":"18"},{"size":6177,"mtime":1620126549832,"results":"21","hashOfConfig":"18"},{"size":924,"mtime":1620126550143,"results":"22","hashOfConfig":"18"},{"size":145,"mtime":1620126550102,"results":"23","hashOfConfig":"18"},{"size":248,"mtime":1620126550034,"results":"24","hashOfConfig":"18"},{"size":2058,"mtime":1620126549993,"results":"25","hashOfConfig":"18"},{"size":1943,"mtime":1620126549948,"results":"26","hashOfConfig":"18"},{"size":511,"mtime":1620126549939,"results":"27","hashOfConfig":"18"},{"size":1407,"mtime":1620126549989,"results":"28","hashOfConfig":"18"},{"size":1452,"mtime":1620126549975,"results":"29","hashOfConfig":"18"},{"size":121,"mtime":1620126550146,"results":"30","hashOfConfig":"18"},{"size":2076,"mtime":1620130468484,"results":"31","hashOfConfig":"18"},{"size":482,"mtime":1620126549882,"results":"32","hashOfConfig":"18"},{"size":761,"mtime":1620129241421,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"c8c9ea",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/younis/Desktop/RingCentral/client/src/index.js",[],["69","70"],"/Users/younis/Desktop/RingCentral/client/src/App.js",[],"/Users/younis/Desktop/RingCentral/client/src/reportWebVitals.js",[],"/Users/younis/Desktop/RingCentral/client/src/components/CallPage/CallPage.js",["71","72"],"import { useEffect, useReducer, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { getRequest, postRequest } from \"./../../utils/apiRequests\";\nimport {\n  BASE_URL,\n  GET_CALL_ID,\n  SAVE_CALL_ID,\n} from \"./../../utils/apiEndpoints\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport \"./CallPage.scss\";\nimport Messenger from \"./../UI/Messenger/Messenger\";\nimport MessageListReducer from \"../../reducers/MessageListReducer\";\nimport Alert from \"../UI/Alert/Alert\";\nimport MeetingInfo from \"../UI/MeetingInfo/MeetingInfo\";\nimport CallPageFooter from \"../UI/CallPageFooter/CallPageFooter\";\nimport CallPageHeader from \"../UI/CallPageHeader/CallPageHeader\";\n\nlet peer = null;\nconst socket = io.connect(\"http://localhost:4000\");\nconst initialState = [];\n\nconst CallPage = () => {\n  const history = useHistory();\n  let { id } = useParams();\n  const isAdmin = window.location.hash == \"#init\" ? true : false;\n  const url = `${window.location.origin}${window.location.pathname}`;\n  let alertTimeout = null;\n\n  const [messageList, messageListReducer] = useReducer(\n    MessageListReducer,\n    initialState\n  );\n\n  const [streamObj, setStreamObj] = useState();\n  const [screenCastStream, setScreenCastStream] = useState();\n  const [meetInfoPopup, setMeetInfoPopup] = useState(false);\n  const [isPresenting, setIsPresenting] = useState(false);\n  const [isMessenger, setIsMessenger] = useState(false);\n  const [messageAlert, setMessageAlert] = useState({});\n  const [isAudio, setIsAudio] = useState(true);\n\n  useEffect(() => {\n    if (isAdmin) {\n      setMeetInfoPopup(true);\n    }\n    initWebRTC();\n    socket.on(\"code\", (data) => {\n      peer.signal(data);\n    });\n  }, []);\n\n  const getRecieverCode = async () => {\n    const response = await getRequest(`${BASE_URL}${GET_CALL_ID}/${id}`);\n    if (response.code) {\n      peer.signal(response.code);\n    }\n  };\n\n  const initWebRTC = () => {\n    navigator.mediaDevices\n      .getUserMedia({\n        video: true,\n        audio: true,\n      })\n      .then((stream) => {\n        setStreamObj(stream);\n\n        peer = new Peer({\n          initiator: isAdmin,\n          trickle: false,\n          stream: stream,\n        });\n\n        if (!isAdmin) {\n          getRecieverCode();\n        }\n\n        peer.on(\"signal\", async (data) => {\n          if (isAdmin) {\n            let payload = {\n              id,\n              signalData: data,\n            };\n            await postRequest(`${BASE_URL}${SAVE_CALL_ID}`, payload);\n          } else {\n            socket.emit(\"code\", data, (cbData) => {\n              console.log(\"code sent\");\n            });\n          }\n        });\n\n        peer.on(\"connect\", () => {\n          // wait for 'connect' event before using the data channel\n        });\n\n        peer.on(\"data\", (data) => {\n          clearTimeout(alertTimeout);\n          messageListReducer({\n            type: \"addMessage\",\n            payload: {\n              user: \"other\",\n              msg: data.toString(),\n              time: Date.now(),\n            },\n          });\n\n          setMessageAlert({\n            alert: true,\n            isPopup: true,\n            payload: {\n              user: \"other\",\n              msg: data.toString(),\n            },\n          });\n\n          alertTimeout = setTimeout(() => {\n            setMessageAlert({\n              ...messageAlert,\n              isPopup: false,\n              payload: {},\n            });\n          }, 10000);\n        });\n\n        peer.on(\"stream\", (stream) => {\n          // got remote video stream, now let's show it in a video tag\n          let video = document.querySelector(\"video\");\n\n          if (\"srcObject\" in video) {\n            video.srcObject = stream;\n          } else {\n            video.src = window.URL.createObjectURL(stream); // for older browsers\n          }\n\n          video.play();\n        });\n        \n      })\n      .catch(() => {});\n  };\n\n  const sendMsg = (msg) => {\n    peer.send(msg);\n    messageListReducer({\n      type: \"addMessage\",\n      payload: {\n        user: \"you\",\n        msg: msg,\n        time: Date.now(),\n      },\n    });\n  };\n\n  const screenShare = () => {\n    navigator.mediaDevices\n      .getDisplayMedia({ cursor: true })\n      .then((screenStream) => {\n        peer.replaceTrack(\n          streamObj.getVideoTracks()[0],\n          screenStream.getVideoTracks()[0],\n          streamObj\n        );\n        setScreenCastStream(screenStream);\n        screenStream.getTracks()[0].onended = () => {\n          peer.replaceTrack(\n            screenStream.getVideoTracks()[0],\n            streamObj.getVideoTracks()[0],\n            streamObj\n          );\n        };\n        setIsPresenting(true);\n      });\n  };\n\n  const stopScreenShare = () => {\n    screenCastStream.getVideoTracks().forEach(function (track) {\n      track.stop();\n    });\n    peer.replaceTrack(\n      screenCastStream.getVideoTracks()[0],\n      streamObj.getVideoTracks()[0],\n      streamObj\n    );\n    setIsPresenting(false);\n  };\n\n  const toggleAudio = (value) => {\n    streamObj.getAudioTracks()[0].enabled = value;\n    setIsAudio(value);\n  };\n\n  const disconnectCall = () => {\n    peer.destroy();\n    history.push(\"/\");\n    window.location.reload();\n  };\n\n  return (\n    <div className=\"callpage-container\">\n      <video className=\"video-container\" src=\"\" controls></video>\n\n      <CallPageHeader\n        isMessenger={isMessenger}\n        setIsMessenger={setIsMessenger}\n        messageAlert={messageAlert}\n        setMessageAlert={setMessageAlert}\n      />\n      <CallPageFooter\n        isPresenting={isPresenting}\n        stopScreenShare={stopScreenShare}\n        screenShare={screenShare}\n        isAudio={isAudio}\n        toggleAudio={toggleAudio}\n        disconnectCall={disconnectCall}\n      />\n\n      {isAdmin && meetInfoPopup && (\n        <MeetingInfo setMeetInfoPopup={setMeetInfoPopup} url={url} />\n      )}\n      {isMessenger ? (\n        <Messenger\n          setIsMessenger={setIsMessenger}\n          sendMsg={sendMsg}\n          messageList={messageList}\n        />\n      ) : (\n        messageAlert.isPopup && <Alert messageAlert={messageAlert} />\n      )}\n    </div>\n  );\n};\nexport default CallPage;\n","/Users/younis/Desktop/RingCentral/client/src/utils/apiRequests.js",[],"/Users/younis/Desktop/RingCentral/client/src/utils/apiEndpoints.js",[],"/Users/younis/Desktop/RingCentral/client/src/reducers/MessageListReducer.js",[],"/Users/younis/Desktop/RingCentral/client/src/components/UI/Messenger/Messenger.js",[],"/Users/younis/Desktop/RingCentral/client/src/components/UI/CallPageFooter/CallPageFooter.js",[],"/Users/younis/Desktop/RingCentral/client/src/components/UI/Alert/Alert.js",[],"/Users/younis/Desktop/RingCentral/client/src/components/UI/MeetingInfo/MeetingInfo.js",[],"/Users/younis/Desktop/RingCentral/client/src/components/UI/CallPageHeader/CallPageHeader.js",["73"],"import { useState, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faUserFriends,\n  faCommentAlt,\n  faUserCircle,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport \"./CallPageHeader.scss\";\nimport { formatDate } from \"./../../../utils/helpers\";\n\nconst CallPageHeader = ({\n  isMessenger,\n  setIsMessenger,\n  messageAlert,\n  setMessageAlert,\n}) => {\n  let interval = null;\n  const [currentTime, setCurrentTime] = useState(() => {\n    return formatDate();\n  });\n\n  useEffect(() => {\n    interval = setInterval(() => setCurrentTime(formatDate()), 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  return (\n    <div className=\"frame-header\">\n      <div className=\"header-items icon-block\">\n        <FontAwesomeIcon className=\"icon\" icon={faUserFriends} />\n      </div>\n      <div\n        className=\"header-items icon-block\"\n        onClick={() => {\n          setIsMessenger(true);\n          setMessageAlert({});\n        }}\n      >\n        <FontAwesomeIcon className=\"icon\" icon={faCommentAlt} />\n        {!isMessenger && messageAlert.alert && (\n          <span className=\"alert-circle-icon\"></span>\n        )}\n      </div>\n      <div className=\"header-items date-block\">{currentTime}</div>\n      <div className=\"header-items icon-block\">\n        <FontAwesomeIcon className=\"icon profile\" icon={faUserCircle} />\n      </div>\n    </div>\n  );\n};\n\nexport default CallPageHeader;\n","/Users/younis/Desktop/RingCentral/client/src/utils/helpers.js",[],"/Users/younis/Desktop/RingCentral/client/src/components/HomePage/HomePage.js",["74","75"],"/Users/younis/Desktop/RingCentral/client/src/components/NoMatch/NoMatch.js",[],"/Users/younis/Desktop/RingCentral/client/src/components/UI/Header/Header.js",["76"],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":26,"column":40,"nodeType":"83","messageId":"84","endLine":26,"endColumn":42},{"ruleId":"85","severity":1,"message":"86","line":51,"column":6,"nodeType":"87","endLine":51,"endColumn":8,"suggestions":"88"},{"ruleId":"85","severity":1,"message":"89","line":23,"column":16,"nodeType":"90","endLine":23,"endColumn":69},{"ruleId":"91","severity":1,"message":"92","line":48,"column":13,"nodeType":"93","endLine":48,"endColumn":24},{"ruleId":"94","severity":1,"message":"95","line":53,"column":13,"nodeType":"93","endLine":53,"endColumn":149},{"ruleId":"94","severity":1,"message":"95","line":13,"column":9,"nodeType":"93","endLine":13,"endColumn":109},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'initWebRTC' and 'isAdmin'. Either include them or remove the dependency array.","ArrayExpression",["98"],"Assignments to the 'interval' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},"Update the dependencies array to be: [initWebRTC, isAdmin]",{"range":"101","text":"102"},[1720,1722],"[initWebRTC, isAdmin]"]